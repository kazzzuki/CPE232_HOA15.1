
- name: Create Neutron database
  mysql_db:
    name: neutron
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Grant privileges on Neutron database
  mysql_user:
    name: neutron
    password: NEUTRON_PASS
    priv: "neutron.*:ALL"
    state: present
    host: "{{ item }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  loop:
    - localhost
    - "%"

- name: Source the admin credentials
  shell: ". /home/kazuki/admin-openrc"

- name: Create Neutron user
  command: " openstack user create --domain default --password-prompt neutron "
  environment:
    OS_USERNAME: admin
    OS_PASSWORD: NEUTRON_PASS
    OS_PROJECT_NAME: admin
    OS_AUTH_URL: http://192.168.56.131/v3
  async: 3600
  poll: 0

- name: Add admin role to neutron user
  command: "openstack role add --project service --user neutron admin"
  environment:
    OS_USERNAME: admin
    OS_PASSWORD: NEUTRON_PASS
    OS_PROJECT_NAME: admin
    OS_AUTH_URL: http://192.168.56.131/v3
  async: 3600
  poll: 0

- name: Create neutron service entity
  command: ' openstack service create --name neutron --description "OpenStack Networking" network '
  async: 3600
  poll: 0

- name: Create networking service API endpoints (public)
  command: ' openstack endpoint create --region RegionOne network public http://controller:9696 '
  async: 3600
  poll: 0

- name: Create network service API endpoints (internal)
  command: ' openstack endpoint create --region RegionOne network internal http://controller:9696 '
  async: 3600
  poll: 0

- name: Create network service API endpoints (admin)
  command: ' openstack endpoint create --region RegionOne network admin http://controller:9696 '
  async: 3600
  poll: 0

- name: Install network components
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - neutron-server
    - neutron-plugin-ml2
    - neutron-linuxbridge-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent

- name: Edit /etc/neutron/neutron.conf file
  lineinfile:
    path: /etc/neutron/neutron.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^connection =', line: 'connection = mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron' }
    - { regexp: '^core_plugin =', line: 'core_plugin = ml2' }
    - { regexp: '^service_plugins =', line: 'service_plugins =' }
    - { regexp: '^transport_url =', line: 'transport_url = rabbit://openstack:RABBIT_PASS@controller' }
    - { regexp: '^auth_strategy =', line: 'auth_strategy = keystone' }
    - { regexp: '^www_authenticate_uri =', line: 'www_authenticate_uri = http://controller:5000' }
    - { regexp: '^auth_url =', line: 'auth_url = http://controller:5000' }
    - { regexp: '^memcached_servers =', line: 'memcached_servers = controller:11211' }
    - { regexp: '^auth_type =', line: 'auth_type = password' }
    - { regexp: '^project_domain_name =', line: 'project_domain_name = default' }
    - { regexp: '^user_domain_name =', line: 'user_domain_name = default' }
    - { regexp: '^project_name =', line: 'project_name = service' }
    - { regexp: '^username =', line: 'username = neutron' }
    - { regexp: '^password =', line: 'password = NEUTRON_PASS' }
    - { regexp: '^notify_nova_on_port_status_changes =', line: 'notify_nova_on_port_status_changes = true' }
    - { regexp: '^notify_nova_on_port_data_changes =', line: 'notify_nova_on_port_data_changes = true' }
    - { regexp: '^auth_url =', line: 'auth_url = http://controller:5000' }
    - { regexp: '^auth_type =', line: 'auth_type = password' }
    - { regexp: '^project_domain_name =', line: 'project_domain_name = default' }
    - { regexp: '^user_domain_name =', line: 'user_domain_name = default' }
    - { regexp: '^region_name =', line: 'region_name = RegionOne' }
    - { regexp: '^project_name =', line: 'project_name = service' }
    - { regexp: '^username =', line: 'username = nova' }
    - { regexp: '^password =', line: 'password = NOVA_PASS' }
    - { regexp: '^lock_path =', line: 'lock_path = /var/lib/neutron/tmp' }

- name: Edit /etc/neutron/plugins/ml2/ml2_conf.ini file
  lineinfile:
    path: /etc/neutron/plugins/ml2/ml2_conf.ini
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^type_drivers =', line: 'type_drivers = flat,vlan' }
    - { regexp: '^tenant_network_types =', line: 'tenant_network_types =' }
    - { regexp: '^mechanism_drivers =', line: 'mechanism_drivers = linuxbridge' }
    - { regexp: '^extension_drivers =', line: 'extension_drivers = port_security' }
    - { regexp: '^flat_networks =', line: 'flat_networks = provider' }
    - { regexp: '^enable_ipset =', line: 'enable_ipset = true' }

- name: Edit /etc/neutron/plugins/ml2/linuxbridge_agent.ini file
  lineinfile:
    path: /etc/neutron/plugins/ml2/linuxbridge_agent.ini
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^physical_interface_mappings =', line: 'physical_interface_mappings = provider:PROVIDER_INTERFACE_NAME' }
    - { regexp: '^enable_vxlan =', line: 'enable_vxlan = false' }
    - { regexp: '^enable_security_group =', line: 'enable_security_group = true' }
    - { regexp: '^firewall_driver =', line: 'firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver' }

- name: Edit /etc/neutron/dhcp_agent.ini file
  ansible.builtin.lineinfile:
    path: /etc/neutron/dhcp_agent.ini
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^interface_driver =', line: 'interface_driver = linuxbridge' }
    - { regexp: '^dhcp_driver =', line: 'dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq' }
    - { regexp: '^enable_isolated_metadata =', line: 'enable_isolated_metadata = true' }

- name: Edit /etc/neutron/metadata_agent.ini file
  lineinfile:
    path: /etc/neutron/metadata_agent.ini
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^nova_metadata_host =', line: 'nova_metadata_host = controller' }
    - { regexp: '^metadata_proxy_shared_secret =', line: 'metadata_proxy_shared_secret = METADATA_SECRET' }

- name: Edit /etc/nova/nova.conf file
  lineinfile:
    path: /etc/nova/nova.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^auth_url =', line: 'auth_url = http://controller:5000' }
    - { regexp: '^auth_type =', line: 'auth_type = password' }
    - { regexp: '^project_domain_name =', line: 'project_domain_name = default' }
    - { regexp: '^user_domain_name =', line: 'user_domain_name = default' }
    - { regexp: '^region_name =', line: 'region_name = RegionOne' }
    - { regexp: '^project_name =', line: 'project_name = service' }
    - { regexp: '^username =', line: 'username = neutron' }
    - { regexp: '^password =', line: 'password = NEUTRON_PASS' }
    - { regexp: '^service_metadata_proxy =', line: 'service_metadata_proxy = true' }
    - { regexp: '^metadata_proxy_shared_secret =', line: 'metadata_proxy_shared_secret = METADATA_SECRET' }

- name: Populate the Neutron database
  command: "su -s /bin/sh -c 'neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head' neutron"
  async: 3600
  poll: 0

- name: Restart Compute API service
  service:
    name: nova-api
    state: restarted

- name: Restart Networking services
  service:
    name: "{{ item }}"
    state: restarted
  loop:
    - neutron-server
    - neutron-linuxbridge-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent
